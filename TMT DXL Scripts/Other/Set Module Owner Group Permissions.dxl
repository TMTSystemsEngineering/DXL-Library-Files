// Set Module Owner Group Permissions
/* 
 Set Module Owner Group Permissions - for TMT
 June 2016

 Description: 	This script changes the access permissions in the current module by granting additional access
		to the DOORS user group that is the "owner" of this module. 
		Each module is associated with a group of special users that need full edit access to the values,
		but not necessarily edit access to the TMT standard field definitions.

		If the module owner users group does not exist, then the script exits gracefully.

 Method:	The script uses the built-in DXL functions: 
			Attribute Access: setVal & setDef
			Module Access: set

 Assumptions:	1) the module owner user group is named: module_name "-Owner"

 Directions:	1) open the module you want to edit
		2) in that module window, select menu item: Tools / Edit DXL...
		3) paste this script code into the dialog window and click "Run"

*/




Module m = current
if (null m)
{
   ack "No module is open!  Aborting."
   halt
}
string mod_name = name(m)
print "Module: " mod_name "\n"

if (!isEdit current)
{
   ack "This module is NOT opened for edit.  Aborting."
   halt
}



string ModuleOwnerGroup = mod_name "-Owner"
print "Variable ModuleOwnerGroup = " ModuleOwnerGroup " \n"

if (!existsGroup(ModuleOwnerGroup))		// check if this user group does not exist
{
   ModuleOwnerGroup = "NONE"			// the module owner group does not exist
   print "Module owner group does not exist. \n"
   ack "The module owner user group for this module does not exist.  Aborting."
   halt
}



Permission P_r     = read
Permission P_rm    = read|modify
Permission P_rmc   = read|modify|create
Permission P_rmcd  = read|create|modify|delete
Permission P_rmcda = read|create|modify|delete|control

AccessRec ar = null

AttrDef ad


Object o 
string s = ""
int i




// =======================================================================================
// Set the Module access permissions: 
//	[module]-Owner   =   RMC

print "Setting Module permissions...  \n"

err = set(m,P_rmc,ModuleOwnerGroup)
if (!null err) errorBox(err)




// =======================================================================================
// Set the Section / Object access permissions - for the headers.  
//	[module]-Owner   =   RMCD


print "Setting Section/Object headers...  \n"

string header_text = null
string last_header = null
int obj_level


// Step through the objects, find headings and change the access settings on those objects.

for o in m do {

   obj_level = level(o)

   if (obj_level == 1) then 			// this is a Level 1 header object
   {
      last_header = o."Object Heading"		// save the header text

      specific(o)				// disable inherit access from parent

      err = set(o,P_rmcd,ModuleOwnerGroup)
      if (!null err) errorBox(err)

      
   } else					// this is not an L1 header
   {						//	so it's a requirement or discussion or lower header

      inherited(o)				//	set the object to inherit access from the parent

   }
}




// =======================================================================================
// Set the attributes "CR Text", "CR ID", "Rationale" and "Miscellaneous Reference Documents" 
// so anybody can modify them.
//
//	Systems Engineering	RMCDA
//	JPL-Write		RMCDA
//	[module]-Owner		RM (value)	R (definition)
//	Everyone else		RM (value)	R (definition)
// =======================================================================================

print "Setting TMT Open Attributes...  \n"

string OPENattrs[] = {"CR Text", "CR ID", "Rationale", "Miscellaneous Reference Documents"}

for (i=0; i < 4; i++)
{
   attrname = OPENattrs[i]
   print "    processing: " attrname " \n"

   ad = find(m,attrname)
   if (null ad) then
   {
      ack "Attribute: " attrname " was not found"
   } else
   {
      print attrname " was found - setting access now \n"

// Disable inheritance for this attribute

      err = specificVal(m,ad)
      if (!null err) errorBox(err)


// Attribute VALUE settings ===========================================================================


      err = setVal(m,ad,P_rm,ModuleOwnerGroup)
      if (!null err) errorBox(err)



// Attribute DEFINITION settings ======================================================================

      err = setDef(m,ad,P_r,ModuleOwnerGroup)
      if (!null err) errorBox(err)

   }

}



// =======================================================================================
// Set the TMT Standard fields so only priviliged groups and module owners can modify.
//
//	Systems Engineering	RMCDA
//	JPL-Write		RMCDA
//	[module]-Owner		RM (value)	R (definition)
//	Everyone else		R (value)	R (definition)
//
// The complete list of TMT standard attributes is given in: 
//	"Requirements Management Procedure Document", TMT.SEN.TEC.13.040
// =======================================================================================

print "Begin processing TMT Standard Attributes...  \n"


string TMTattrs[] = {"TMT ID", "Applicable Subsystems", "Architecture", "IsReq", //-
	"Modified at Release", "Key", "Driving", //-
	"CR State", "CR History", "Acceptance State", "Compliance State", "Compliance Notes", //-
	"Compliance Reference", "Compliance Reference Section or Page", "SE Notes", "Owner", "Waiver", "All VAs Completed", //-
	"Overall Verification Description", "Overall Verification State", "VA Links", //-
	"VCRM Agreement Status", "Paragraph Style", "CR History", "Linked to OAD Requirements",  //-
	"Linked to OCD Requirements", "Linked to OPSRD Requirements", "Linked to ORD Requirements", //-
	"Name", "Object Heading", "Object Text", "Object Short Text"}

int tasize = sizeof TMTattrs
//debug    print "TMTattrs array size (tasize) = " tasize " \n"

for (i=0; i < tasize; i++)
{
   attrname = TMTattrs[i]
   print "    processing: " attrname " \n"

   ad = find(m,attrname)
   if (null ad) then
   {
      ack "Attribute: " attrname " was not found"
   } else
   {
      print attrname " was found - setting access now \n"

// Disable inheritance for this attribute

      err = specificVal(m,ad)
      if (!null err) errorBox(err)


// Attribute VALUE settings ===========================================================================
// First set the default to RMCDA (this is temporary so the script doesn't erase its own access)
      err = setVal(m,ad,P_rmcda,"")
      if (!null err) errorBox(err)

// Now use dxl function unsetAllVal to clear all access for this attribute (temporarily)
      err = unsetAllVal(m,ad)
      if (!null err) errorBox(err)


      err = setVal(m,ad,P_rmcda,"Systems Engineering")
      if (!null err) errorBox(err)

      err = setVal(m,ad,P_rmcda,"JPL-Write")
      if (!null err) errorBox(err)

      if (ModuleOwnerGroup != "NONE")
      {
         err = setVal(m,ad,P_rm,ModuleOwnerGroup)
         if (!null err) errorBox(err)
      }

      err = setVal(m,ad,P_r,"JPL")
      if (!null err) errorBox(err)

      err = setVal(m,ad,P_r,"")		// set the default to read only
      if (!null err) errorBox(err)


// Attribute DEFINITION settings ======================================================================
// First set the default to RMCDA (this is temporary so the script doesn't erase its own access)
      err = setDef(m,ad,P_rmcda,"")
      if (!null err) errorBox(err)

// Now use dxl function unsetAllDef to clear all access for this attribute (temporarily)
      err = unsetAllDef(m,ad)
      if (!null err) errorBox(err)


      err = setDef(m,ad,P_rmcda,"Systems Engineering")
      if (!null err) errorBox(err)

      err = setDef(m,ad,P_rmcda,"JPL-Write")
      if (!null err) errorBox(err)

      if (ModuleOwnerGroup != "NONE")
      {
         err = setDef(m,ad,P_r,ModuleOwnerGroup)
         if (!null err) errorBox(err)
      }

      err = setDef(m,ad,P_r,"JPL")
      if (!null err) errorBox(err)

      err = setDef(m,ad,P_r,"")		// set the default to read-only
      if (!null err) errorBox(err)

   }

}




print "Finished \n"
