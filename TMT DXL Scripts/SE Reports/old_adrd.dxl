// SE Report: Report Old AD/RD Citations in All DRD Modules
/* 
 Generate Systems Engineering Report: Report Old AD/RD Citations in all modules - for TMT

 Description: 	The purpose of this script is to report on the state of AD/RD links in the DRD modules.
		The script outputs a text report located in the user's current working directory.
		 
 Process:	The script performs these steps:
		1) Examines each of the modules listed in the script code
		2) Looks for any outlinks in section 1 to the Documents Register
		3) For each linked document, the script looks for any newer rev of the same document
			- newer docs are reported so that links might be updated by the module custodian
		4) The script does not change anything
			- some links are supposed to point to older versions
			- any changes are then done by the module custodians 

 Assumptions:	1) the output file is named "SE_report.txt"
		2) the script only examines the modules with names beginning with "DRD "
		3) assumes a max of 150 valid DRD modules - used in an array declaration (DRD_modules_items)
		4) the Documents Register module name is hard-coded:
			"/TMT Requirements/Document and CR Registers/Documents Register"
		5) the Documents link module name is hard-coded:
			"/TMT Requirements/Links/Documents"
		6) the script requires read access to all listed DRD modules and the Documents module
		7) the script will close the Documents Register at the end, 
		   so if you had it open, then it will be closed. we might decide to omit this behavior.

 If the Script Crashes:
		If the script crashes or your DOORS DB connection drops, then be advised that some
		modules might remain open.  The script opens each DRD module, one ad a time, read-only
		and does NOT display them.  Likewise, it opens the Documents Register module and
		keeps it hidden.  If the script crashes then there will likely be 2 modules left open
		(one DRD module and the Documents module).  You will not notice this because they are
		hidden.  You can easily se all hidden open modules using the DOORS menu item:
		Tools / Manage Open Modules...
		By opening the modules read-only, then if the user is kicked out and they do not promptly
		reconnect to DOORS, then the lingering open modules won't prevent other users from
		getting work done.


 Directions:	1) run this script from the Project window
		2) in the Project window, select menu item: Tools / Edit DXL...
		3) paste this script code into the dialog window and click "Run"


*/
pragma runLim, 0	// suppress DXL execution timeout


string filename = "SE_Report.txt"		// define output filename


//=======================================================================================================
// Variable declarations

string DRD_Folders[] = {"/TMT Requirements/Level 0 Requirements", //-
			"/TMT Requirements/Level 1 Requirements", //-
			"/TMT Requirements/Level 2 Requirements", //-
			"/TMT Requirements/Level 3 Requirements"}
int numFolders = sizeof DRD_Folders


string Documents_Module 	= "/TMT Requirements/Document and CR Registers/Documents Register"
Module docModule
string LinkModuleName 		= "/TMT Requirements/Links/Documents"
Link outLink



//=======================================================================================================
// Subroutine Definition

// Loop over the "items" in a given folder.
//       if the item is a folder, then recursively process that folder
//       if the item is a formal module, then process that:
//          test if the module name begins with "DRD "
//          if a match, then save the Item reference in an array for later processing


// Variables defined here so they have global scope and this subroutine can use them

Item	DRD_modules_items[150]			// assumes max number of valid DRD modules is 150
int	numDRDitems = 0

void loopThroughFolder (Folder f)
{
   Module mod = null
   Item i
   string thisMOD_name = ""
   int offset, len

   if (null f) { return }

   for i in f do				// loop over all items in the folder
   {
      if (isDeleted(i)) {continue}		// skip deleted items

      if (type(i) == "Folder") {		// recursively dive into any folder

         loopThroughFolder(folder(i))

      } else if (type(i) == "Formal") {		// this is a formal module

         thisMOD_name = name(i)			// get module name (string)

         if (thisMOD_name[0:3] == "DRD ") {	// is this a valid DRD module

            DRD_modules_items[numDRDitems] = i
            numDRDitems++

         }
      }
   }
}





//=======================================================================================================
//=======================================================================================================
// MAIN CODE



string 		thisModuleName
ModName_ 	thisModuleRef
Item 		thisModuleItem
Module 		thisModule
Folder 		thisFolder

int i, ifolder

Object o
Object d
string obj_number

string dccDocHandleHyperlink = ""
string dccDocVersionHyperlink = ""
string dccDocNo = ""
string dccDocTitle = ""
string dccDocRev = ""
string dccDocStatus = ""
string DocumentTitle = ""
string DocumentNo = ""
string DocumentRev = ""
string CADDocumentNo = ""
string DocumentHyperlink = ""
string DocType = ""
int link_absno
string link_objtxt
string link_supersede
string titleinfo
int doc_absno
int newer_absno
int obj_absno
string obj_objtxt
string doc_no
string doc_docno
string doc_status
string doc_objtxt
bool sameDoc
int countADRD
string adrdtitle
int offset, len

int loopcounter = 0




// Examine the current project

Project p = current Project
if (null p) {
   ack "No project is open.  Aborting."
   halt
}
print "Project: " (name p) "\n"

print "Current Dir:" currentDirectory "\n"



//=======================================================================================================
// Open the Documents module (read-only)

print "Opening the Documents module...  \n"

docModule = read(Documents_Module, false)
if (null docModule)
{
   ack "The Documents module did NOT open!  Aborting."
   halt
}


//=======================================================================================================
// Check if we can open the output file

output = write filename
if (null output) {
   ack "Failed to open output file.  Aborting."
   halt
}
print "Output file: " filename "\n"



// Begin output report

output << "TMT SE Report: Link Status for AD/RD Sections in Each DRD \n"
string thedate = stringOf(today)
output << thedate "\n\n"
output << "The IDs reported below are the DOORS IDs for the objects listed. \n\n\n"



//=======================================================================================================
// Loop over the list of DOORS folders that contain DRD modules
//	- this loop calls a recursive routine, so any folders inside folders, will be recursively examined
//	- ONLY modules with names beginning with "DRD " will be opened and processed
//	- the first loop assembles a list of the DRD modules, storing their DOORS "Item"
//	- the second loop processes each of those DRD modules saved in the list


print "Begin loop over array of DOORS folders... \n"

for (ifolder=0; ifolder < numFolders; ifolder++)
{
   if (!folder(DRD_Folders[ifolder]))		// Can the user read this folder
   {
      print "ERROR: User lacks permission to read the DRD folder: " DRD_Folders[ifolder] " \n"
      continue			// jump to next folder in the "for ifolder" loop
   }

   thisFolder = folder DRD_Folders[ifolder]

   loopThroughFolder(thisFolder)		// recursively examine this folder

}		// end of "for ifolder" loop over array of DOORS folder names

print "Done looping over the folders. \n"
print "Number of DRD modules found: " numDRDitems " \n"


print "Begin processing list of Items (DRD modules)... \n"

for (i=0; i < numDRDitems; i++)
{
   thisModuleItem = DRD_modules_items[i]
   thisModuleName = name(thisModuleItem)			// get module name (string)

   print "Processing: " thisModuleName "\n"
   output << "\nPROCESSING: " thisModuleName "\n"

   thisModuleRef = module(thisModuleName)	// get the module handle from the module name



loopcounter++
//if (loopcounter > 3) {break}		// debug line to limit run to a few modules during testing

// Open this module

   thisModule = read(fullName(thisModuleItem),false)	// open the module for read
   if (null thisModule) {
      ack "   ERROR: unable to open this module.  Skipping. \n"
      output << "   ERROR: unable to open this module.  Skipping. \n"
      continue
   }


//=======================================================================================================
// Process this module - loop over objects in section 1, examining links to the Documents module

   countADRD = 0
   for o in thisModule do {			// loop over the objects in this module

      obj_number = number(o)			// is a string, e.g. 1.4-2-5 
      if ( obj_number >= "2" ) {break}		// jump out of loop over objects if past section 1
      obj_absno = o."Absolute Number"
      obj_objtxt = o."Object Text"


      for outLink in o->LinkModuleName do	// loop over all outlinks to the Docs module
      {
         countADRD++				// count the number of links

         dccDocNo 		= (target outLink)."dccDocNo"
         DocType 		= (target outLink)."DocType"
//         dccDocRev 		= (target outLink)."dccDocRev"
//         dccDocTitle 		= (target outLink)."dccDocTitle"
         dccDocStatus 		= (target outLink)."dccDocStatus"
//         DocumentTitle 		= (target outLink)."DocumentTitle"
         DocumentNo 		= (target outLink)."DocumentNo"
//         CADDocumentNo 		= (target outLink)."CADDocumentNo"
//         DocumentRev 		= (target outLink)."DocumentRev"
//         DocumentHyperlink 	= (target outLink)."DocumentHyperlink"
//         dccDocHandleHyperlink 	= (target outLink)."dccDocHandleHyperlink"
//         dccDocVersionHyperlink = (target outLink)."dccDocVersionHyperlink"
         link_absno           	= (target outLink)."Absolute Number"
         link_objtxt            = (target outLink)."Object Text"
         link_supersede 	= (target outLink)."SupersedingDocument"

         print "   Link from " obj_absno " to " link_absno " is being examined.  \n"


// If the cited document is not the "LATEST", then look for one labeled as latest.

         if (dccDocStatus != "LATEST") {


            for d in docModule do {			// loop over all docs in the Docs module

               doc_absno = d."Absolute Number"

               if (doc_absno == link_absno) {continue}		// skip this if it's the linked doc

               doc_no     = d."dccDocNo"
               doc_status = d."dccDocStatus"
               doc_docno  = d."DocumentNo"
               doc_objtxt = d."Object Text"
               titleinfo = ""

               titleinfo = doc_objtxt



// Check if this doc is the same as the linked doc.  
//	Note: "same" = both docs using the same dccDocNo or DocumentNo, 
//                     or object text (if both dccDocNo and DocumentNo are blank)

               sameDoc = false
               if (dccDocNo == "") {					// dccDocNo empty, so check DocumentNo

                  if (DocumentNo == "") {	// dccDocNo blank + DocumentNo blank = can't use these to find matching docs
						// will use the object text, which should be populated with either doc title or other

                     if (doc_objtxt == link_objtxt) { sameDoc = true }


                  } else {			// dccDocNo blank + DocumentNo's match and are not blank

                     if (DocumentNo == doc_docno) { sameDoc = true }

                  }

               } else {							// dccDocNo not empty

                  if (dccDocNo == doc_no) { sameDoc = true }

               }

               if (sameDoc) {					// this doc is the same, but different version
                  if (doc_status == "LATEST") {			// is this doc marked as latest
								//   this is therefore newer than the linked doc

                     newer_absno = doc_absno
                     print "   Link from DRD ID " obj_absno " to Doc ID " link_absno " is old.  Newer is: " doc_absno "  \n"

// Print entry in report - of new document to link to for this object
//   Include the first line of the AD/RD entry in the DRD module

                     if (findPlainText(obj_objtxt,"\n",offset,len,false)) {
                        adrdtitle = obj_objtxt[0:offset-1]
                     } else {
                        adrdtitle = obj_objtxt
                     }
                     output << "  " adrdtitle " needs to be changed from " link_absno " to " doc_absno " \n"



                     if (link_supersede != "") {
                        output << "           Original Linked Doc Marked as Superseded by: " link_supersede " \n"
                     }
                     if (DocType == "Document (Industry Standard)") {
                        output << "           Original Linked Doc Marked as INDUSTRY STANDARD \n"
                     }

                    
                     doc_status = ""		// clear status to ensure good comparison on next pass in loop

                  }
               }


            }	// end of loop over all docs in Docs module


         }


      }		// end of loop over outlinks to the Docs module



   }	// end of loop over objects in this module

   print "   AD/RD links found in this module: " countADRD "\n"
   output << "      AD/RD links found in this module: " countADRD "\n"



// Close this module

   close(thisModule, false)

}	// end of loop over list of modules



output << "\n\nEND OF REPORT. \n"




//=======================================================================================================
// Clear memory (becuase DXL is not good at memory management)



close(docModule)			// close the Documents module



//=======================================================================================================
// Print final output summary


print "Finished \n"
