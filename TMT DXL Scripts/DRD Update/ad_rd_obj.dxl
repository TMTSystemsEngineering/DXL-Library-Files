// Update AD/RD Lists
/* 
 Get Text From Documents Module AND Create Links - for TMT
 
 Version:	GetTextFromDocuments Module Gen2 v7.dxl

 Description: 	The purpose of this script is to populate the AD & RD table information for DRD modules.
		The script reads the intended linked document ID from the attribute "AD/RD Document ID".
		The script gets text from the cited document in the Documents Register module and adds that
		to the "Object Text" or "CR Text" field in this module.  The "CR Text" field is used
		when the module is under configuration control and a CR is needed to change the Object Text.
		The script deletes any existing links to the Documents Register and creates a new link
		to the cited document.
		 
 Process:	The script performs these steps:
		1) Steps through the objects in the current module
			- stops processing when it is past section 1
		2) Only processes objects that where the Object Text begins with AD or RD
			- needed because output differs for ADs and RDs
		3) Reads the document ID in the "AD/RD Document ID" field
			- finds that ID in the Document Register module and fetches info for that doc
			- creates a link to that document in the Document Register
		4) Places all output into either the Object Text field or the CR Text field
			- depending on the value of OBJtext_OR_CRtext
		5) AD Documents with dccDocStatus = "InProcess" are marked as "(In Preparation)" 
			No hyperlinks or document versions are included for AD documents in preparation.
		6) Objects with "DELETE" or "DELETED" in the "AD/RD Document ID" field have links deleted and 
		 	a "(Deleted)" notation is added to the doc citation text
		7) AD and RD objects with non-integers in the "AD/RD Document ID" field are reported and ignored

 Assumptions:	The script requires the following conditions for proper function:
		1) The user must have the DRD module open with edit access.
		2) Object Text begins with AD or RD.  A regexp is used to spot these and handle the differences.
		3) The script only processes objects in section 1 where the Object Text begins with AD or RD.
		4) The Documents module is named "/TMT Requirements/Documents Register/Documents Register".
		5) The Documents Register module is left open (read-only), so the user must close it.
		6) The link module to use is named "/TMT Requirements/Links/Documents".
		
 Before Use:	Before running the script, perform these steps:
		1) Set the value of the variable OBJtext_OR_CRtext at the top of the code
		2) Open the Documents module

 Directions:	1) open the module you want to edit
		2) in that module window, select menu item: Tools / Edit DXL...
		3) edit the value of OBJtext_OR_CRtext variable
		4) paste this script code into the dialog window and click "Run"
		5) the DXL output window will display any errors in finding the cited documents
			- write these down or take a sceencap to save them and address later
			- especially note any AD/RDs that were skipped since they may appear to be proper

*/
pragma runLim, 0	// suppress DXL execution timeout



// Tell script where to place output: Object Text = "OBJ" or CR Text = "CR"

string OBJtext_OR_CRtext = "OBJ"	// this script version is used for editing the OBJ Text


Module m = current
if (null m)
{
   ack "No module is open!  Aborting."
   halt
}


if (!isEdit current)
{
   ack "This module is NOT opened for edit.  Aborting."
   halt
}


//=======================================================================================================
// Initialize some variables

Object o 
Object d
string s = ""
string newtext = ""
string newRichText
int i
int count
bool FoundDoc
string ADorRD = ""

string Documents_Module 	= "/TMT Requirements/Documents Register/Documents Register"
string LinkModuleName 		= "/TMT Requirements/Links/Documents"
Module docModule
Link outLink
string obj_number

string dccDocHandleHyperlink = ""
string dccDocVersionHyperlink = ""
string dccDocNo = ""
string dccDocTitle = ""
string dccDocRev = ""
string dccDocStatus = ""
string DocumentTitle = ""
string DocumentNo = ""
string DocumentRev = ""
string DocumentObjText = ""
string CADDocumentNo = ""
string DocumentHyperlink = ""
string CurrentObjectText = ""
string DocID = ""			// this is the ID cited in the DRD
string DRdocID = ""			// this is the ID in the Documents Register
string RegObjTxt = ""
string ADRDdcchyperlink = ""
int absno

int UpdateCount = 0
int ADRDCount = 0
int CountDocsFound = 0
int CountDocsNotFound = 0
int CountDeletedDocs  = 0
int CountDeletedLinks = 0
int CountCreatedLinks = 0
int CountSkipped = 0

Regexp AD_re = regexp2 "^AD[0-9]+"
Regexp RD_re = regexp2 "^RD[0-9]+"
Regexp DocID_re = regexp2 "^[0-9]+$"

string ADRD_prefix = ""
int lenprefix = 0

print "Module: " m."Name" "\n"


//=======================================================================================================
// Open the Documents module (read-only)

print "Opening the Documents module...  \n"

docModule = read(Documents_Module, true)
if (null docModule)
{
   ack "The Documents module did NOT open!  Aborting."
   halt
}


//=======================================================================================================
// Check if the stated link module exists in the current project

ModName_ LinkModule = module(LinkModuleName)		// convert module name to module handle
if ( exists(ModName_ LinkModule) )			// exists needs a module handle
{
   print "Link module found. \n"
} else
{
   ack "Specified link module does not exist: " LinkModuleName " Aborting. \n"
   halt
}

Buffer bufferText = create()


//=======================================================================================================
// Step through the objects in the DRD, find objects where Object Text begins with AD or RD.

print "Looping over objects...  \n"
for o in m do {



//=======================================================================================================
// Only work on objects in section 1

   obj_number = number(o)			// is a string, e.g. 1.4-2-5 
   if ( obj_number >= "2" ) {break}		// jump out of loop over objects if past section 1



//=======================================================================================================
// Grab the Object Text for this object.  Use regexp to test for AD or RD.

   CurrentObjectText = o."Object Text"		// grab existing AD/RD text (string format, drops any bold)

   ADorRD = ""
   if (AD_re CurrentObjectText) 
   {
      ADorRD = "AD"
      ADRD_prefix = CurrentObjectText[match 0]			// extract the AD number callout
   } else
   {
      if (RD_re CurrentObjectText)
      {
         ADorRD = "RD"
         ADRD_prefix = CurrentObjectText[match 0]		// extract the RD number callout
      }
   }



//=======================================================================================================
// Continue with this object ONLY if it is an AD or RD

   if ( ADorRD == "AD" || ADorRD == "RD" )		// also could have tested: ADorRD != ""
   {



//=======================================================================================================
// Get the cited document ID in the DRD for this AD/RD

      ADRDCount++					// count the number of AD/RD objects found
      newtext = ""
      DocID = o."AD/RD Document ID"			// get the cited document ID in string format

      print "AD/RD:" ADRD_prefix "  cites DocID:" DocID " \n"		// debug line here



//=======================================================================================================
// Check if the cited document DOORS ID = "DELETE" or "DELETED"
//	In this case, use the existing link to fetch the document info, don't output any hyperlinks,
//	and add the word "DELETED" to the citation.  Then delete the link.
//	If there is no existing link, then just add the "Deleted" notation to the citation.
//	Note: If this object has multiple outlinks to documents, then the script will delete all outlinks.
//	Also: If the doc citation already has "Deleted" at the end, then the script will add another one.


      if (DocID == "DELETE" || DocID == "DELETED") 
      {
         print "Found a deleted AD/RD. \n"		// debug line here
         CountDeletedDocs++		// increment count of DocID fields that say DELETE or DELETED
         count = 0
         for outLink in o->LinkModuleName do 	// examine all links through the Documents link module
         {					// fetch the info for this linked document
            count++

// Remember the linked doc info, because we will be deleting this link

            dccDocNo 			= (target outLink)."dccDocNo"
            dccDocRev 			= (target outLink)."dccDocRev"
            dccDocTitle 		= (target outLink)."dccDocTitle"
            dccDocStatus 		= (target outLink)."dccDocStatus"
            DocumentTitle 		= (target outLink)."DocumentTitle"
            DocumentNo 			= (target outLink)."DocumentNo"
            DocumentObjText 		= (target outLink)."Object Text"
            CADDocumentNo 		= (target outLink)."CADDocumentNo"
            DocumentRev 		= (target outLink)."DocumentRev"

            if (canDelete(outLink)) {
               delete outLink			// now delete this link
            } else {
               print "ERROR: Was not able to delete the link from " ADRD_prefix " to Doc " dccDocNo " \n"
            }

         }

         if (count > 0) { flushDeletions }	// flush intentionally done outside of above loop
         if (count > 1) { print "WARNING: this AD/RD had multiple links to documents.  Only the last was used. \n" }
			
// Create new deleted doc citation: use existing OBJ text

         newRichText = richText o."Object Text"			// get the existing RTF object text 
								//    (so we retain the bold AD/RD)
         newRichText = newRichText "\t(Deleted)\n"		// append the deleted notation

         o."Object Text" = richText newRichText			// update the Object Text field
         o."AD/RD Document ID" = ""				// clear out the DocID field for this AD/RD

         continue				// jump to get the next AD/RD object in the DRD


      } else					// DocID does not = DELETE or DELETED
      {



//=======================================================================================================
// Check if the cited document DOORS ID appears valid: string of numbers and nothing else

         if (DocID_re DocID)
         {
//         print "DocID is VALID:" DocID " \n"		// debug line here
         } else
         {
            print "DocID is NOT valid:" DocID "   This object will be skipped. \n"
            CountSkipped++
            continue					// jump to the top of the loop over DRD objects
         }


//=======================================================================================================
// Find this document ID in the Documents Register module

         FoundDoc = false
         for d in docModule do {		// loop over all objects in the documents module

            DRdocID = identifier d		// DOORS ID in string format
            absno = d."Absolute Number"		// DOORS ID in integer format

            if (DRdocID == DocID) 		// does this document match the cited DocID
            {
               FoundDoc = true


//=======================================================================================================
// Fetch the needed values from this object in the Documents Register

// clear out the strings so they don't retain anything from prev AD/RD (may be unneeded if blanks are all nulls)
               link_dccDocHandleHyperlink = ""
               link_dccDocVersionHyperlink = ""
               dccDocNo = ""
               dccDocTitle = ""
               dccDocStatus = ""
               DocumentTitle = ""
               DocumentObjText = ""
               CADDocumentNo = ""
               DocumentHyperlink = ""
               ADRDdcchyperlink = ""

// get the values from the Documents Register
               dccDocNo 		= d."dccDocNo"
               dccDocRev 		= d."dccDocRev"
               dccDocTitle 		= d."dccDocTitle"
               dccDocStatus 		= d."dccDocStatus"
               DocumentTitle 		= d."DocumentTitle"
               DocumentObjText 		= d."Object Text"
               DocumentNo 		= d."DocumentNo"
               CADDocumentNo 		= d."CADDocumentNo"
               DocumentRev 		= d."DocumentRev"
               DocumentHyperlink 	= d."DocumentHyperlink"
               dccDocHandleHyperlink 	= d."dccDocHandleHyperlink"
               dccDocVersionHyperlink 	= d."dccDocVersionHyperlink"

               break			// jump out of loop over documents to speed up script

            }
         }					// end loop over documents module


      }		// endif DocID = DELETE or DELETED


//=======================================================================================================
// Finish processing this AD/RD object


      if (FoundDoc)			// the cited doc was found in the Documents Register
      {
         CountDocsFound++


//=======================================================================================================
// Delete any links from this AD/RD to the documents module

         count = 0
         for outLink in o->LinkModuleName do
         {
            delete outLink			// might need error trapping here
            count++
         }
         CountDeletedLinks += count
         if (count > 0) { flushDeletions }	// flush intentionally done outside of above loop
         if (count > 1) { print "WARNING: this AD/RD had " count " links to documents. All were deleted. \n" }
  
       
//=======================================================================================================
// Create link from this AD/RD to the cited document

         o -> LinkModuleName -> d		// might need error trapping here
         CountCreatedLinks++


//=======================================================================================================
// Update this AD/RD with info from the Documents Register
//	This is done by adding text to the variable newtext, which is then placed into the Object Text
//	Separate code blocks handle ADs and RDs because they have slightly different content


         UpdateCount++
         newtext = ADRD_prefix		// begin assembling the new AD/RD text citation

         if (!null dccDocTitle) 	// use dccDocTitle if not empty (this is the preferred title)
         {
//changed_to_objtxt            newtext = newtext "\n\t" dccDocTitle
            newtext = newtext "\t" DocumentObjText

         } else			// dccDocTitle missing, so use the non-TMT document title
         {
//changed_to_objtxt            newtext = newtext "\n\t" DocumentTitle
            newtext = newtext "\t" DocumentObjText
         }

         if (!null CADDocumentNo) 		// add CADDocumentNo if not empty
         {
            newtext = newtext "\n\tCAD Drawing No: " CADDocumentNo
 
            if ( ADorRD == "AD" )			// add rev info for ADs, not RDs
            {
	       if (!null DocumentRev) 		// add the rev for this drawing, if it exists
	       {
                  newtext = newtext "  Rev " DocumentRev
               }
            }
         }

         if (!null dccDocNo) 	// add dccDocNo if not empty
         {
            newtext = newtext "\n\t" dccDocNo


            if ( ADorRD == "AD" )			// add rev info for ADs, not RDs
            {
               if (!null dccDocRev)  			// add the rev, if it exists
               {
                  if (dccDocStatus != "InProcess")	// dont show doc rev if doc is in preparation
                  {
                     newtext = newtext "  " dccDocRev
                  }
               }
            }

         }

         if (!null DocumentNo) 	// add DocumentNo if not empty (except not if it matches dccDocNo)
         {

            if (DocumentNo != dccDocNo)
            {
               newtext = newtext "\n\t" DocumentNo

               if ( ADorRD == "AD" )				// add rev info for ADs, not RDs
               {
                  if (!null DocumentRev && null CADDocumentNo) 	// add the rev, if it exists
                  {
                     if (dccDocStatus != "InProcess")		// dont show doc rev if doc is in preparation
                     {
                        newtext = newtext "  " DocumentRev
                     }
                  }
               }

            }
         }


         if (dccDocStatus == "InProcess")	// if doc is in preparation, add a notation for ADs
         {

            if ( ADorRD == "AD" ) 
            { 
               newtext = newtext "   (In Preparation)" 

            } else				// this is an RD, so include the handle hyperlink
            {
               if (dccDocHandleHyperlink != "")	// if DCC handle hyperlink is available, use it
               { 
                  newtext = newtext "\n\t" dccDocHandleHyperlink 
               }
            }

         } else				// doc is not in preparation
         {


// In all cases (TMT or non-TMT), use the TMT/DCC hyperlink if it's there  (no hyperlinks for InProcess docs)

            if ( ADorRD == "AD" )	// use different hyperlink for ADs and RDs
            {
               ADRDdcchyperlink = dccDocVersionHyperlink
            } else
            {
               ADRDdcchyperlink = dccDocHandleHyperlink
            }

            if (ADRDdcchyperlink != "")		// if DCC hyperlink is available, use it
            {
               newtext = newtext "\n\t" ADRDdcchyperlink

            } else		// no TMT doc version link, use DocumentHyperlink if it's not empty
            {
               if (!null DocumentHyperlink) 
               {
                  newtext = newtext "\n\t" DocumentHyperlink
               }
            }
         } 



         newtext = newtext "\n"		// add extra blank line at the bottom to improve readability after export

//not_bold         if (OBJtext_OR_CRtext == "OBJ") { o."Object Text" = newtext }
//not_bold         if (OBJtext_OR_CRtext == "CR") { o."CR Text" = newtext }

         bufferText = "{\\b " ADRD_prefix "}"	// start off by making the AD/RD number bold
         lenprefix = length(ADRD_prefix)
         bufferText += newtext[lenprefix:]		// tack on the remaining text from the new citation

         if (OBJtext_OR_CRtext == "OBJ") { o."Object Text" = richText tempStringOf bufferText }
         if (OBJtext_OR_CRtext == "CR") { o."CR Text" = richText tempStringOf bufferText }


      } else				// the cited AD doc was NOT found
      {
         print "   Did NOT find this DocID in the Documents Register \n"
         CountDocsNotFound++
      }


   }		// endif ADorRD = AD or RD

}		// end loop over objects in the DRD

refresh(m)			// refresh the display so these changes are visible


//=======================================================================================================
// Clear memory (becuase DXL is not good at memory management)

delete (AD_re)
delete (RD_re)
delete (DocID_re)
delete bufferText


//=======================================================================================================
// Print final output summary

print ADRDCount " AD and RD objects were found in the DRD. \n"
print CountDocsFound " cited documents were found in the Documents Register. \n"
print CountDocsNotFound " cited documents were NOT found. \n"
print UpdateCount " AD/RD objects were upated in the DRD. \n"
print CountDeletedDocs " AD/RD documents were marked as deleted, per DELETED flag. \n"
print CountDeletedLinks " links were deleted. \n"
print CountCreatedLinks " links were created. \n"
print CountSkipped " objects were not recognized and were skipped. \n"
print "Finished \n"
