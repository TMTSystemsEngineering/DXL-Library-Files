// VCRM to VA Links
/* Import VA descriptions from a CSV (Excel) file.
   Version: VCRM_to_VA_links.dxl

Description:	The VCRM to VA Links script will populate the VAM module with information provided
		in an input Excel file (saved as CSV file). Links are created from each VA entry
		to the associated requirement in the DRD module.

Process:	


Assumptions:	The script requires the following conditions for proper function:
		1) The first row of the CSV file must contain the column headers
		2) The 1st column of the CSV file must be TMT ID and have the header "TMT ID"
		3) The 2nd column of the CSV file is expected to contain the reqt text
		4) The 3rd column of the CSV file must contain the VA Name with the header "VA Name"
		5) The CSV file must contain a column with a header "Overall Method"
		6) The columns between 3rd and Overall Method are separate milestones
		7) The CSV file must contain a column with a header "Verification Description"


Directions:	1) Open the desired VA Module and the associated DRD module in exclusive edit mode.
		2) Run this script from the VA Module

Notes:		a. Dialog windows will display errors and other important information such as
		   skipped rows of the CSV file.

*/

pragma runLim, 0


// debugout needs to be declared before including csvimport.dxl
// Stream debugout = write ("Y:\\TMT\\debugout.txt")
// if (null debugout)  ackAndHalt ("UH OH COULD NOT OPEN DEBUG OUTPUT FILE")

// The include statement below must have the full pathname for it to work properly
// in the TMT custom DOORS menu.
#include "TMT DXL Scripts/VCRM Management/include_files/csvimport.dxl"

string enderrmsg = ""   // to report errors at the end
int enderrcount = 0
////////////////////////////////////////////////////////////////////////
// Now look at the current module, which should be the VAM            //
////////////////////////////////////////////////////////////////////////
Module vam = current
if (null vam) ackAndHalt ("No current module (VAM).  Aborting.")
if (!isEdit(vam))  ackAndHalt ("Current module not open for edit.  Aborting.")
string vamname = name(vam)
string vamfullpath = fullName (vam)
int offset
int len
bool foundvam = findPlainText(vamname, "VAM", offset, len, true)
if (!foundvam) //-
    ackAndHalt ("Current module doesn't seem to have string VAM in its name.  Aborting.")

// find current last in VAM.  We'll start putting things after that.  Not too sophisticated
//  too unsophisticated: Object VAMlast = last vam
Object o
Object vlasttoplevel = null
for o in entire vam do
{
  if (isDeleted(o)) continue
  if (!isOutline(o)) continue
  int level = level (o)
  if (level == 1) vlasttoplevel = o
}
if (null vlasttoplevel) ackAndHalt ("Couldn't find last top level object.  Aborting.")

////////////////////////////////////////////////////////////////////////
// Check to be sure there's at least one other open module.  Doesn't  //
// matter what mode.  We'll go through this loop again and again      //
// looking for the TMT ID.  That really is a pain, but so what.       //
////////////////////////////////////////////////////////////////////////
Module m
Project p = current
int countmods = 0
for m in p do
{
  string mname = name (m)
  if (type(m) != "Formal") continue
  string mfullpath = fullName (m)
  print "comparing " vamfullpath " with " mfullpath "\t"
  if (vamfullpath != mfullpath) countmods++
  print "countmods = " countmods "\n"
}
if (countmods > 0)
{
  ack "Found " countmods " open modules other than vam, that's good"
}
else
{
   ackAndHalt ("Found no open modules other than VAM.  Aborting.")
}

////////////////////////////////////////////////////////////////////////
// Now we open the csv file to get the data to operate on             //
////////////////////////////////////////////////////////////////////////
// string csvfname = "Y:\\TMT\\APS_VCRM_SAMPLE.csv"
string csvfname = null
DB inputfnamebox = create ("Input Filename", styleCentered)
DBE inputfname = fileName (inputfnamebox, "CSVFilename.csv",
                            "*.csv", "Text files")
void getfname (DB inputfnamebox)
{
  csvfname = get inputfname
  return
}
apply (inputfnamebox, "Apply", getfname)	// this line means the user must click the "Apply" button
						// in the dialog, otherwise the filename will not be fetched
						// however, the "Apply" button does not close the dialog
						// so the user must also click the "Close" button
block (inputfnamebox)
hide (inputfnamebox)

ack "Will use VCRM input file " csvfname
   
bool result = pcsv_initfile (csvfname)

if (!result) //-
    ackAndHalt ("Could not open and initialize csv file '" csvfname "'.  Aborting.")

int numcols = pcsv_getncols()
print "csv file has " numcols " columns in header\n"

////////////////////////////////////////////////////////////////////////
// Need the names of the milestones.  Don't really want to rely on    //
// the idea that they're an acronym ending in R.  Maybe just that     //
// it's an acronym is sufficient.  Acronym is single alphabetic word  //
////////////////////////////////////////////////////////////////////////

// Scan through skiplist of column headers to find "Overall Method"

int colno
string k
//not used   Regexp acroRE = regexp ("^[A-Za-z]+$")
int firstmilestonecol = 2    // first col is 0, no?
int lastmilestonecol = 0
// first find the "Overall Method" column.  If none, goodbye
for colno in pcsv_coldefs do
{
  k = (string key pcsv_coldefs)
  if (k == "Overall Method")
  {
    lastmilestonecol = colno - 1
    break
  }
}
if (lastmilestonecol < firstmilestonecol)
{
  ackAndHalt ("couldn't find 'Overall Method' column in '" csvfname "'.  Aborting.")
}

// Scan skiplist of column headers to count milestones and extra columns

int nMilestones = 0
int nExtraColumns = 0
bool foundtmtid = false
bool foundverifsn = false
for colno in pcsv_coldefs do
{
  k = (string key pcsv_coldefs)
  print "colno = " colno " k = " k "\n"
  // if (acroRE k) nMilestones++  // DOING BY POSITION NOW
  if (colno >= firstmilestonecol && colno <= lastmilestonecol)
  {
    if (k == "Verification Short Name") continue	// added by evans
    if (k[0:10] == "Requirement") continue		// added by evans
    nMilestones++
  }
  else if (colno > lastmilestonecol)
  {
    nExtraColumns++
  }
  if (k == "TMT ID") foundtmtid = true
  if (k == "Verification Short Name") foundverifsn = true
}
if (nMilestones == 0)  //-
    ackAndHalt ("Couldn't find any milestones in column headers.  Aborting.")
if (!foundtmtid) ackAndHalt ("Couldn't find TMT ID in column headers.  Aborting.")

// Scan skiplist and save milestones & extra columns in arrays

string sMilestones[nMilestones]
string sExtraColumns[nExtraColumns]
int i = 0
int j = 0
string mmsg = "Found " nMilestones " milestones:"
string emsg = "Found " nExtraColumns " extra columns to consider:"
for colno in pcsv_coldefs do
{
  k = (string key pcsv_coldefs)
  // if (acroRE k) 	// regexp is not used now
  if (colno >= firstmilestonecol && colno <= lastmilestonecol)
  {
    if (k == "VA Name") continue			// added by evans
    if (k[0:10] == "Requirement") continue		// added by evans
    sMilestones[i] = k
    mmsg = mmsg " " k
    i++
  }
  else if (colno > lastmilestonecol)
  {
    sExtraColumns[j] = k
    emsg = emsg " " k
    j++
  }
}
ack mmsg
ack emsg

////////////////////////////////////////////////////////////////////////
// Now we need to find the columns in the csv that aren't otherwise   //
// used.  That _should_ be everything after the lastmilestonecol.  We //
// match that with the VAM's attribute definitions.  If an exact      //
// match exists, we assume that we should put the column value in the //
// VAM entry's corresponding attribute.                               //
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
//  Start putting new stuff after last heading in VAM, which we found //
//  earlier                                                           //
////////////////////////////////////////////////////////////////////////
Date thedate = today
string sthedate = stringOf(thedate)
Object vamlast = create after vlasttoplevel
vamlast."Object Heading" = "New Activities inserted from file " csvfname //-
                           " on " sthedate

string skippedrows = "Skipped Rows in the CSV File: "


// Now go through the rows of csv
while (true)
{
  int rowno = pcsv_nextrow() ;
  int ssrowno = rowno+1

  print "Got row " ssrowno "\n"
  if (rowno < 0) break
  string tmtid = pcsv_getval ("TMT ID")
  if (tmtid == "")
  {
    string msg = "CSV Row " ssrowno " has no TMT ID, skipping\n"
    skippedrows = skippedrows "\n   " ssrowno " - no TMT ID"
    // too many to put in the end error message - it looks like
    // it didn't succeed.
    // enderrmsg = enderrmsg msg
    // enderrcount++
    print msg
    continue
  }
  print "Row " ssrowno " has tmt id " tmtid "\n"
  
  // find the target in the extra modules
  countmods = 0
  bool foundit = false
  string mname
  string mfullpath
  Object t = null

  for m in p do				// for each module in this project
  {
    mname = name (m)
    if (type(m) != "Formal") continue	// if this is not a Formal module, skip it
    mfullpath = fullName (m)
    // print "comparing " vamfullpath " with " mfullpath "\t"
    if (vamfullpath == mfullpath) continue	// skip the VAM module
    countmods++
    for t in entire m do		// search for the target object in the DRD module
    {
      if (isDeleted(t)) continue	// skip this object if it is deleted
      string thisID = t."TMT ID"
      if (thisID == tmtid) foundit = true
      if (foundit) break
    }
    if (foundit) break
  }
  if (!foundit) 
  {
    string msg = 
         "Could not find TMT ID '" tmtid "' found in CSV row " ssrowno " in any open module, skipping this row.\n"
    skippedrows = skippedrows "\n   " ssrowno " " tmtid " - TMT ID not found in any module"
    enderrmsg = enderrmsg msg
    enderrcount++
    print msg
    continue    // skip the rest of processing for this one
  }
  int tabsno = t."Absolute Number"
  print "Found TMT ID '" tmtid "' in object " tabsno " in mod " mfullpath "\n"
	
  //  NOW WE LOOK AT EACH MILESTONE in the csv.  If it has something in it,
  //  1) create a new object in VAM for that milestone, filling in 
  //           Spreadsheet                  VAM
  //           --------------------------   --------------
  //           VA Name                   -> Object Text
  //           Verification Description  -> VA Description
  //           milestone                 -> VA Milestone
  //           milestone (method)        -> VA Method
  //  2) link the new object in VAM to found target in module
  string vaname = pcsv_getval("VA Name")
  if (vaname == "") { vaname = " " }
  string ovd = pcsv_getval("Verification Description")
  int i
  bool foundone = false
  for (i = 0 ; i < nMilestones ; i++)
  {
    string milestone = sMilestones[i]
    string ss_method = pcsv_getval(milestone)
    if (ss_method != "")
    {
      foundone = true
      Object newvam = null
      if (isOutline (vamlast)) newvam = create below vamlast
      else                     newvam = create after vamlast
      if (null newvam)  ackAndHalt ("Couldn't creat new vam entry.  Aborting.")

      int newabsno = newvam."Absolute Number"
// print "created newvam number " newabsno "\n"
      newvam."Object Text" = vaname
      newvam."VA Description" = ovd
      newvam."VA Milestone" = milestone
      string method
      if (ss_method == "D")      method = "Design"
      else if (ss_method == "M") method = "Demonstration"
      else if (ss_method == "I") method = "Inspection"
      else if (ss_method == "A") method = "Data Analysis"
      else if (ss_method == "T") method = "Test"
      else
      {
        string msg = "milestone method " ss_method " not one of D, M, I, A, T in row " ssrowno "\n"
        enderrmsg = enderrmsg msg
        enderrcount++
        print msg
        skippedrows = skippedrows "\n   " ssrowno " " tmtid " - milestone method not D, M, I, A, T"
        continue   // THIS SHOULD get us out of this milestone...
      }
      newvam."VA Method" = method
      // Now the link
      noError
      t <- newvam
      string lasterr = lastError
      if (lasterr != "") 
      {
        string msg = "ERROR while linking: " lasterr "  csv row " ssrowno " new vam ID " newabsno " -> target ID " tabsno " target TMT ID " tmtid "\n"
        enderrmsg = enderrmsg msg
        enderrcount++
        print msg
      }
      vamlast = newvam   // for next time through
      // Now look at extra columns.  If the csv value is empty, skip it.  
      // If the attribute doesn't exist in module, skip it.
			int j
			for (j = 0 ; j < nExtraColumns ; j++)
			{
				string colname = sExtraColumns[j]
				string val = pcsv_getval(colname)
// print "  j = " j " colname = " colname " val = " val "\n"
				if (val == "") continue
				// doing this in module 'vam'.  It's slow to do this every time, 
				// but shouldn't be too many
				AttrDef ad = find (vam, colname)
				// Do we have to just hope this is a string attribute?  Enum will work
				// but could fail if not in enumeration list
				if (null ad) continue
// print "Setting newvam " newabsno " attr " colname " value " val "\n"
        noError
				newvam.colname = val
				string lasterr = lastError
				if (lasterr != "") ack "UH OH GOT AN ERROR " lasterr "\ncsv row " ssrowno " col " colname " val " val " but continuing"
			}
    }
  }
}

ack skippedrows ""

print "\n\nAT END, error messages are:\n" enderrmsg "\n"
if (enderrcount > 0)  
{
  if (enderrcount < 10) ackAndHalt (enderrmsg)
  else        ackAndHalt ("More than 10 errors, can only display 9,\n see dxl window for all message")
}
